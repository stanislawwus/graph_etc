import networkx as nx
import matplotlib.pyplot as plt

def read_csv(file_path, orientated = False):
    with open(file_path, "r+", encoding="utf-8") as f:
        content = f.readlines()
    content = [i.strip().split(",")[:2] for i in content]
    edges = [[int(i.strip()) for i in line] for line in content]
    graph = {}
    for a, b in edges:
        if not orientated:
            if a not in graph:
                graph[a] = []
            if b not in graph:
                graph[b] = []
            graph[a].append(b)
            graph[b].append(a)
        else:
            if a not in graph:
                graph[a] = []
            graph[a].append(b)
    return graph

def main(graph):
    res=[]
    def hamilton(graf, size, start, path=[]):
        if start not in path:
            path.append(start)
            if len(path)==size:
                res.append(path)
                return path
            for start_next in graf[start]:
                res_path = [i for i in path]
                hamilton (graf, size, start_next, res_path)
    for i in list(graph.keys()):
        hamilton(graph, len(graph), i, [])
    check=[]#for orientated graphs
    check2=0
    if len(res)!=0:
        for i in res:
            check.append(i[0])
    check=set(check)
    for i in check:
        if i in list(graph.keys()):
            check2+=1
    if check2==len(list(graph.keys())) and check2!=0:
        return res[0]
    if len(res)!=0:
        return f'no hamilton cycle but this graph has hamilton path or pathes: {res}'
    return 'miss input, try again but with the new graph'

def eiler_cycle(graph, orientated = False):
    def is_connected(graph):
        visited = set()

        def dfs(vertex):
            visited.add(vertex)
            for degree in graph[vertex]:
                if degree not in visited:
                    dfs(degree)

        start_vertex = next(iter(graph))
        dfs(start_vertex)

        return len(visited) == len(graph)
    if not is_connected(graph):
        return 'Eulerian cycle does not exist.'
    if orientated is False:
        for items in graph.items():
            if len(items[1]) % 2 != 0:
                return 'Eulerian cycle does not exist'
        current_vertex = list(graph.keys())[0]
        eulerian_cycle = [current_vertex]
        while graph[current_vertex]:
            next_vertex = graph[current_vertex].pop(0)
            graph[next_vertex].remove(current_vertex)
            current_vertex = next_vertex
            eulerian_cycle.append(current_vertex)
        return eulerian_cycle
    else:
        graph_vertex_degrees = {vertex: len(neighbors) for vertex, neighbors in graph.items()}
        current_vertex = None
        for vertex, outdegree in graph_vertex_degrees.items():
            if outdegree > 0:
                current_vertex = vertex
                break

        eulerian_cycle = [current_vertex]
        while graph[current_vertex]:
            next_vertex = graph[current_vertex].pop(0)
            graph_vertex_degrees[current_vertex] -= 1
            current_vertex = next_vertex
            eulerian_cycle.append(current_vertex)

        while any(graph_vertex_degrees.values()):
            for i, vertex in enumerate(eulerian_cycle):
                if graph[vertex]:
                    subcycle = [vertex]
                    while graph[vertex]:
                        next_vertex = graph[vertex].pop(0)
                        graph_vertex_degrees[vertex] -= 1
                        vertex = next_vertex
                        subcycle.append(vertex)
                    eulerian_cycle = eulerian_cycle[:i+1] + subcycle + eulerian_cycle[i+1:]
        return eulerian_cycle

def bipartite_check(graph: dict[int, list[int]]) -> bool:
    """
    Checks if graph is bipartite
    """
    vertices = list(graph.keys())
    vertices += [i for v in graph.values() for i in v]
    vertices = list(set(vertices))
    for i in vertices:
        graph.setdefault(i, [])
    graph = dict(sorted(graph.items(), key=lambda item: len(item[1]), reverse=True))
    vertices = list(graph.keys())
    n = len(graph)
    color = [0 for _ in range(n)]
    queue = []

    for i, ver in enumerate(vertices):
        queue.append(ver)
        for x in graph[ver]:
            if color[i] == 0 and color[vertices.index(x)] == 0:
                color[i] = -1
            elif color[vertices.index(x)] != 0:
                color[vertices.index(ver)] = - color[vertices.index(x)]

        while queue:
            vertex = queue.pop(0)
            for j in graph[vertex]:
                if vertex == j:
                    pass
                elif color[vertices.index(j)] == 0:
                    color[vertices.index(j)] = - color[vertices.index(vertex)]
                    queue.append(j)
                elif color[vertices.index(j)] == color[vertices.index(vertex)]:
                    return False
    return True

def izomorf_check(graph1: dict, graph2: dict) -> bool:
    """Checking if two graphs are izomorf"""

    flag = True

    dct_len_1 = [len(value) for value in graph1.values()]
    dct_len_2 = [len(value) for value in graph2.values()]

    # vertex degree check
    if sorted(dct_len_1) != sorted(dct_len_2):
    # first check
        flag = False

    # vertex check
    if len(graph1) != len(graph2):
    # second check
        flag = False
    

#     # edge check
#     if len({tuple(sorted(value)): key for key, value in graph1.items()}) \
# != len({tuple(sorted(value)): key for key, value in graph2.items()}):
#     # third check
#         flag = False

    # eiler cycle check
    lst_el_1 = all([i % 2 == 0 for i in dct_len_1])
    lst_el_2 = all([i % 2 == 0 for i in dct_len_2])

    # fourth check
    if lst_el_1 != lst_el_2:
        flag = False

    # eiler path check
    count1 = 0

    for item in dct_len_1:
        if item % 2 != 0:
            count1 += 1
    
    count2 = 0

    for item in dct_len_2:
        if item % 2 != 0:
            count2 += 1

    # fifth check
    if count1 == 2 and count2 != 2:
        flag = False
    
    if count1 != 2 and count2 == 2:
        flag = False


    return flag


def dsatur_paint(graph):
    visited = [list(graph.keys())[0]]
    colors = [["lightgreen", [visited[0]]], ["pink", []], ["m", []]]
    connect = [visited[0]]
    while len(visited) < len(graph):
        if len(connect) == 0:
            for i in sorted(graph):
                if i not in visited:
                    connect.append(i)
                    break
        current = connect.pop()
        if current not in visited and len(graph[current]) == 0:
            visited.append(current)
            for color in range(len(colors)):
                if color == 1 and len(colors[color][1]) > 0 and len(colors[color+1][1]) == 0:
                    colors[color+1][1].append(current)
                    break
                if all(elem not in graph[current] for elem in colors[color][1]) and current not in colors[color][1]:
                    colors[color][1].append(current)
                    break
        for i in graph[current]:
            if i not in visited:
                visited.append(i)
                for color in range(len(colors)):
                    if color == 1 and len(colors[color][1]) > 0 and len(colors[color+1][1]) == 0:
                        colors[color+1][1].append(i)
                        break
                    if all(elem not in graph[i] for elem in colors[color][1]) and i not in colors[color][1]:
                        colors[color][1].append(i)
                        break
                connect.append(i)
            elif (current not in visited and all(elem in visited for elem in graph[current])):
                visited.append(current)
                for color in range(len(colors)):
                    if color == 1 and len(colors[color][1]) > 0 and len(colors[color+1][1]) == 0:
                        colors[color+1][1].append(current)
                        break
                    if all(elem not in graph[current] for elem in colors[color][1]) and current not in colors[color][1]:
                        colors[color][1].append(current)
                        break
                connect.append(current)
    color_map = {}
    for color in colors:
        for node in sorted(color[1]):
            color_map[node] = color[0]
    if len(color_map) != len(graph):
        return False
    graph_edg = graph
    graph_c = color_map
    G = nx.Graph()
    for i in graph_edg:
        G.add_node(i, color=graph_c[i])
        for j in graph_edg[i]:
            G.add_edge(i, j)
    node_colors = [G.nodes[i]['color'] for i in G.nodes]
    nx.draw(G, node_color=node_colors, with_labels=True, font_color='white', font_size = 20, node_size = 2000,)
    plt.show()
