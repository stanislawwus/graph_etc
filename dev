def read_csv(file_path, orientated = False):
    with open(file_path, "r+", encoding="utf-8") as f:
        content = f.readlines()
    content = [i.strip().split(",")[:2] for i in content]
    edges = [[int(i.strip()) for i in line] for line in content]
    graph = {}
    for a, b in edges:
        if not orientated:
            if a not in graph:
                graph[a] = []
            if b not in graph:
                graph[b] = []
            graph[a].append(b)
            graph[b].append(a)
        else:
            if a not in graph:
                graph[a] = []
            graph[a].append(b)
    return graph

def hamilton_cycle():
    pass

def eiler_cycle():
    pass

def bipartite_check(graph: dict[int, list[int]]) -> bool:
    """
    Checks if graph is bipartite
    """
    vertices = list(graph.keys())
    vertices += [i for v in graph.values() for i in v]
    vertices = list(set(vertices))
    for i in vertices:
        graph.setdefault(i, [])
    graph = dict(sorted(graph.items(), key=lambda item: len(item[1]), reverse=True))
    vertices = list(graph.keys())
    n = len(graph)
    color = [0 for _ in range(n)]
    queue = []

    for i, ver in enumerate(vertices):
        queue.append(ver)
        for x in graph[ver]:
            if color[i] == 0 and color[vertices.index(x)] == 0:
                color[i] = -1
            elif color[vertices.index(x)] != 0:
                color[vertices.index(ver)] = - color[vertices.index(x)]

        while queue:
            vertex = queue.pop(0)
            for j in graph[vertex]:
                if vertex == j:
                    pass
                elif color[vertices.index(j)] == 0:
                    color[vertices.index(j)] = - color[vertices.index(vertex)]
                    queue.append(j)
                elif color[vertices.index(j)] == color[vertices.index(vertex)]:
                    return False
    return True

def izomorf_check():
    pass


def paint_graph():
    pass


print(read_csv("ff.csv", True))
