def read_csv(file_path, orientated = False):
    with open(file_path, "r+", encoding="utf-8") as f:
        content = f.readlines()
    content = [i.strip().split(",")[:2] for i in content]
    edges = [[int(i.strip()) for i in line] for line in content]
    graph = {}
    for a, b in edges:
        if not orientated:
            if a not in graph:
                graph[a] = []
            if b not in graph:
                graph[b] = []
            graph[a].append(b)
            graph[b].append(a)
        else:
            if a not in graph:
                graph[a] = []
            graph[a].append(b)
    return graph

def hamilton_cycle():
    pass

def eiler_cycle():
    pass

def bipartite_check(graph: dict[int, list[int]]) -> bool:
    """
    Checks if graph is bipartite
    >>> bipartite_check({1: [2], 2: [], 3: [4, 1], 4: [2]})
    True
    >>> bipartite_check({1: [], 2: [], 3: [4, 1, 2], 4: []})
    True
    >>> bipartite_check({1: [5], 2: [6], 3: [4, 6], 4: [], 5: [], 6: []})
    True
    >>> bipartite_check({1: [2, 4, 5], 2: [1, 3, 6], 3: [2, 4, 7], 4: [1, 3, 8], 5: \
[1, 6, 8], 6: [2, 5, 7], 7: [3, 6, 8], 8: [4, 5, 7]})
    True
    >>> bipartite_check({0: [1, 2], 1: [0, 2], 2: [0, 1], 3: [4], 4: [3]})
    False
    >>> bipartite_check({0: [1, 3], 1: [0, 2], 2: [1, 3], 3: [0, 2]})
    True
    >>> bipartite_check({0: [1, 2, 3], 1: [0, 2], 2: [1, 3], 3: [0, 2]})
    False
    >>> bipartite_check({0: [1, 2], 1: [0, 2], 2: [0, 1]})
    False
    >>> bipartite_check({0: [1, 2], 1: [0, 2, 3], 2: [0, 1, 3], 3: [1, 2]})
    False
    >>> bipartite_check({1: [2, 3], 2: [1, 3], 3: [1, 2]})
    False
    >>> bipartite_check({0: [1, 3, 4], 1: [0, 2, 4], 2: [1, 3, 4], 3: [0, 2, 4], 4: [0, 1, 2, 3]})
    False
    >>> bipartite_check({1: [5], 2: [4], 3: [6], 4: [], 5: [], 6: [1]})
    True
    """
    n = len(graph)
    graph = dict(sorted(graph.items(), key=lambda item: len(item[1]), reverse=True))
    color = [0 for _ in range(n)]
    queue = []
    vertices = list(graph.keys())
    for i, ver in enumerate(vertices):
        if color[i] == 0:
            color[i] = -1
            queue.append(ver)

        while queue:
            vertex = queue.pop(0)
            for j in graph[vertex]:
                if vertex == j:
                    pass
                elif color[vertices.index(j)] == 0:
                    color[vertices.index(j)] = - color[vertices.index(vertex)]
                    queue.append(j)
                elif color[vertices.index(j)] == color[vertices.index(vertex)]:
                    return False
    return True

def izomorf_check():
    pass


def paint_graph():
    pass


print(read_csv("ff.csv", True))